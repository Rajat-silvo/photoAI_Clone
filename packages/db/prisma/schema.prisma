// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Model {
  id             String                  @id @default(uuid())
  name           String
  type           ModelTypeEnum
  age            Int
  ethnicity      EthnicityEnum
  eyeColor       EyeColorEnum
  bald           Boolean
  userId         String
  zipUrl         String // to store the zip URL of the training images
  triggerWord    String?
  tensorPath     String?
  falAiRequestId String? // to store the request ID from FAL AI for tracking
  trainingStatus ModelTrainingStatusEnum @default(Pending)
  //trainingImages TrainingImages[]
  outputImages   OutputImages[]
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  @@index([falAiRequestId])
}

// No need of uploaded images table as we are using zipUrl to store the training images and don't have urls for individual images from s3
// if we want to add a feature where user wants to see their uploaded images, we can create a separate table for that
// model TrainingImages {
//   id       String @id @default(uuid())
//   imageUrl String
//   modelId  String
//   model    Model  @relation(fields: [modelId], references: [id])
// }

model OutputImages {
  id             String                 @id @default(uuid())
  imageUrl       String                 @default("")
  modelId        String
  userId         String
  prompt         String
  falAiRequestId String?
  status         OutputImagesStatusEnum @default(Pending)
  model          Model                  @relation(fields: [modelId], references: [id])
  createdAt      DateTime               @default(now()) // to display the generated images in the UI according to the time of generation
  updatedAt      DateTime               @updatedAt

  @@index([falAiRequestId])
}

model Packs {
  id          String        @id @default(uuid())
  name        String
  imageUrl1   String        @default("")
  imageUrl2   String        @default("")
  description String        @default("")
  PackPrompts PackPrompts[]
}

model PackPrompts {
  id     String @id @default(uuid())
  prompt String
  packId String
  pack   Packs  @relation(fields: [packId], references: [id])
}

enum ModelTypeEnum {
  Man
  Woman
  Other
}

enum EthnicityEnum {
  White
  Black
  Asian_American   @map("Asian American")
  East_Asian       @map("East Asian(Chinese, Japanese, Korean)")
  South_East_Asian @map("South East Asian(Thai, Indonesian)")
  South_Asian      @map("South Asian(Indian)")
  Middle_Eastern   @map("Middle Eastern(Arabic)")
  Pacific          @map("Pacific(Polynesian)")
  Hispanic         @map("Hispanic(Latin American)")
}

enum EyeColorEnum {
  Black
  Brown
  Blue
  Green
  Hazel
  Gray
}

enum OutputImagesStatusEnum {
  Pending
  Processing
  Generated
  Failed
}

enum ModelTrainingStatusEnum {
  Pending
  Processing
  Generated
  Failed
}
